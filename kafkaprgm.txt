KafkaTopicConfig
---------------------------
@Configuration
public class KafkaTopicConfig {

    @Bean
    public NewTopic topicEx(){
        return TopicBuilder.name("topicname")
                .build();
    }
    
}

KafkaController
----------------------	
				
@RestController
@RequestMapping("/api/v1/kafka")
public class KafkaController {
    private Producer producer;

    @Autowired
    public KafkaController(Producer producer) {

        this.producer = producer;
    }

    // http:localhost:8080/api/v1/kafka/publish?message=hello world
    @GetMapping("/publish")
    public ResponseEntity<String> publish(@RequestParam("message") String message){
        producer.sendMessage(message);
        return ResponseEntity.ok("Message sent to the topic");
    }
}

Consumer
--------------
@Service
public class Consumer {

    private static final Logger LOGGER = LoggerFactory.getLogger(Consumer.class);

    @KafkaListener(topics = "topicname", groupId = "${spring.kafka.consumer.group-id}")
    public void consume(String message){

        LOGGER.info(String.format("Message received -> %s", message));
    }
    

}

producer
-----------------
@Service
public class Producer {

    private static final Logger LOGGER = getLogger(Producer.class);

    private KafkaTemplate<String, String> kafkaTemplate;

    public Producer(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendMessage(String message){
        LOGGER.info(String.format("Message sent %s", message));
        kafkaTemplate.send("topicName", message);
    }
}

KafkaApplication
------------------
@SpringBootApplication
public class KafkaApplication {
    public static void main(String[] args) {
        SpringApplication.run(KafkaApplication.class, args);
    }

}

application.properties
----------------------
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.bootstrap-servers: localhost:9092
spring.kafka.consumer.group-id=myId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-deserializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-deserializer=org.apache.kafka.common.serialization.StringSerializer





**************************
http://localhost:8080/publish
{
    "empId":111,
    "firstName":"dddd",
    "lastName":"sss",
    "age":22,
    "sex":"male"
}

 Exception thrown when sending a message with key='null' and payload='Person{empId=111, fi

essage received -> Person{empId=111, firstName='dddd', lastName='sss', age=22, sex='male'}













application.properties
__------------------------

#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/questiondb
#spring.datasource.username=postgres
#spring.datasource.password=postgresql
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.postgresql


#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.producer.value-deserializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer

#------------------------------below are fine

#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.bootstrap-servers: localhost:9092
#spring.kafka.consumer.group-id=myId
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#spring.kafka.consumer.value-deserializer= io.confluent.kafka.serializers.KafkaAvroDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

#spring.kafka.producer.bootstrap-servers: localhost:9092
#spring.kafka.producer.key-Serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer= io.confluent.kafka.serializers.KafkaAvroSerializer


----------------------------------------


spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id=myId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.consumer.value-deserializer= io.confluent.kafka.serializers.KafkaAvroDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-Serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= io.confluent.kafka.serializers.KafkaAvroSerializer
