/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.telusko.quizapp.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VehicleDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8606149210107661384L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VehicleDetails\",\"namespace\":\"com.telusko.quizapp.schema\",\"fields\":[{\"name\":\"empId\",\"type\":\"int\",\"default\":-1},{\"name\":\"vehicleNo\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"vehicleName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"insurance\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"manufacturingYear\",\"type\":\"int\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VehicleDetails> ENCODER =
      new BinaryMessageEncoder<VehicleDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VehicleDetails> DECODER =
      new BinaryMessageDecoder<VehicleDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<VehicleDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<VehicleDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VehicleDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this VehicleDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a VehicleDetails from a ByteBuffer. */
  public static VehicleDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int empId;
  @Deprecated public java.lang.CharSequence vehicleNo;
  @Deprecated public java.lang.CharSequence vehicleName;
  @Deprecated public java.lang.CharSequence insurance;
  @Deprecated public int manufacturingYear;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VehicleDetails() {}

  /**
   * All-args constructor.
   * @param empId The new value for empId
   * @param vehicleNo The new value for vehicleNo
   * @param vehicleName The new value for vehicleName
   * @param insurance The new value for insurance
   * @param manufacturingYear The new value for manufacturingYear
   */
  public VehicleDetails(java.lang.Integer empId, java.lang.CharSequence vehicleNo, java.lang.CharSequence vehicleName, java.lang.CharSequence insurance, java.lang.Integer manufacturingYear) {
    this.empId = empId;
    this.vehicleNo = vehicleNo;
    this.vehicleName = vehicleName;
    this.insurance = insurance;
    this.manufacturingYear = manufacturingYear;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empId;
    case 1: return vehicleNo;
    case 2: return vehicleName;
    case 3: return insurance;
    case 4: return manufacturingYear;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empId = (java.lang.Integer)value$; break;
    case 1: vehicleNo = (java.lang.CharSequence)value$; break;
    case 2: vehicleName = (java.lang.CharSequence)value$; break;
    case 3: insurance = (java.lang.CharSequence)value$; break;
    case 4: manufacturingYear = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'empId' field.
   * @return The value of the 'empId' field.
   */
  public java.lang.Integer getEmpId() {
    return empId;
  }

  /**
   * Sets the value of the 'empId' field.
   * @param value the value to set.
   */
  public void setEmpId(java.lang.Integer value) {
    this.empId = value;
  }

  /**
   * Gets the value of the 'vehicleNo' field.
   * @return The value of the 'vehicleNo' field.
   */
  public java.lang.CharSequence getVehicleNo() {
    return vehicleNo;
  }

  /**
   * Sets the value of the 'vehicleNo' field.
   * @param value the value to set.
   */
  public void setVehicleNo(java.lang.CharSequence value) {
    this.vehicleNo = value;
  }

  /**
   * Gets the value of the 'vehicleName' field.
   * @return The value of the 'vehicleName' field.
   */
  public java.lang.CharSequence getVehicleName() {
    return vehicleName;
  }

  /**
   * Sets the value of the 'vehicleName' field.
   * @param value the value to set.
   */
  public void setVehicleName(java.lang.CharSequence value) {
    this.vehicleName = value;
  }

  /**
   * Gets the value of the 'insurance' field.
   * @return The value of the 'insurance' field.
   */
  public java.lang.CharSequence getInsurance() {
    return insurance;
  }

  /**
   * Sets the value of the 'insurance' field.
   * @param value the value to set.
   */
  public void setInsurance(java.lang.CharSequence value) {
    this.insurance = value;
  }

  /**
   * Gets the value of the 'manufacturingYear' field.
   * @return The value of the 'manufacturingYear' field.
   */
  public java.lang.Integer getManufacturingYear() {
    return manufacturingYear;
  }

  /**
   * Sets the value of the 'manufacturingYear' field.
   * @param value the value to set.
   */
  public void setManufacturingYear(java.lang.Integer value) {
    this.manufacturingYear = value;
  }

  /**
   * Creates a new VehicleDetails RecordBuilder.
   * @return A new VehicleDetails RecordBuilder
   */
  public static com.telusko.quizapp.schema.VehicleDetails.Builder newBuilder() {
    return new com.telusko.quizapp.schema.VehicleDetails.Builder();
  }

  /**
   * Creates a new VehicleDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VehicleDetails RecordBuilder
   */
  public static com.telusko.quizapp.schema.VehicleDetails.Builder newBuilder(com.telusko.quizapp.schema.VehicleDetails.Builder other) {
    return new com.telusko.quizapp.schema.VehicleDetails.Builder(other);
  }

  /**
   * Creates a new VehicleDetails RecordBuilder by copying an existing VehicleDetails instance.
   * @param other The existing instance to copy.
   * @return A new VehicleDetails RecordBuilder
   */
  public static com.telusko.quizapp.schema.VehicleDetails.Builder newBuilder(com.telusko.quizapp.schema.VehicleDetails other) {
    return new com.telusko.quizapp.schema.VehicleDetails.Builder(other);
  }

  /**
   * RecordBuilder for VehicleDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VehicleDetails>
    implements org.apache.avro.data.RecordBuilder<VehicleDetails> {

    private int empId;
    private java.lang.CharSequence vehicleNo;
    private java.lang.CharSequence vehicleName;
    private java.lang.CharSequence insurance;
    private int manufacturingYear;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.telusko.quizapp.schema.VehicleDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleNo)) {
        this.vehicleNo = data().deepCopy(fields()[1].schema(), other.vehicleNo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[2].schema(), other.vehicleName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.insurance)) {
        this.insurance = data().deepCopy(fields()[3].schema(), other.insurance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.manufacturingYear)) {
        this.manufacturingYear = data().deepCopy(fields()[4].schema(), other.manufacturingYear);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VehicleDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.telusko.quizapp.schema.VehicleDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleNo)) {
        this.vehicleNo = data().deepCopy(fields()[1].schema(), other.vehicleNo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[2].schema(), other.vehicleName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.insurance)) {
        this.insurance = data().deepCopy(fields()[3].schema(), other.insurance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.manufacturingYear)) {
        this.manufacturingYear = data().deepCopy(fields()[4].schema(), other.manufacturingYear);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'empId' field.
      * @return The value.
      */
    public java.lang.Integer getEmpId() {
      return empId;
    }

    /**
      * Sets the value of the 'empId' field.
      * @param value The value of 'empId'.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder setEmpId(int value) {
      validate(fields()[0], value);
      this.empId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empId' field has been set.
      * @return True if the 'empId' field has been set, false otherwise.
      */
    public boolean hasEmpId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empId' field.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder clearEmpId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleNo' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleNo() {
      return vehicleNo;
    }

    /**
      * Sets the value of the 'vehicleNo' field.
      * @param value The value of 'vehicleNo'.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder setVehicleNo(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.vehicleNo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleNo' field has been set.
      * @return True if the 'vehicleNo' field has been set, false otherwise.
      */
    public boolean hasVehicleNo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vehicleNo' field.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder clearVehicleNo() {
      vehicleNo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleName' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleName() {
      return vehicleName;
    }

    /**
      * Sets the value of the 'vehicleName' field.
      * @param value The value of 'vehicleName'.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder setVehicleName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.vehicleName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleName' field has been set.
      * @return True if the 'vehicleName' field has been set, false otherwise.
      */
    public boolean hasVehicleName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vehicleName' field.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder clearVehicleName() {
      vehicleName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'insurance' field.
      * @return The value.
      */
    public java.lang.CharSequence getInsurance() {
      return insurance;
    }

    /**
      * Sets the value of the 'insurance' field.
      * @param value The value of 'insurance'.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder setInsurance(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.insurance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'insurance' field has been set.
      * @return True if the 'insurance' field has been set, false otherwise.
      */
    public boolean hasInsurance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'insurance' field.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder clearInsurance() {
      insurance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturingYear' field.
      * @return The value.
      */
    public java.lang.Integer getManufacturingYear() {
      return manufacturingYear;
    }

    /**
      * Sets the value of the 'manufacturingYear' field.
      * @param value The value of 'manufacturingYear'.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder setManufacturingYear(int value) {
      validate(fields()[4], value);
      this.manufacturingYear = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturingYear' field has been set.
      * @return True if the 'manufacturingYear' field has been set, false otherwise.
      */
    public boolean hasManufacturingYear() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'manufacturingYear' field.
      * @return This builder.
      */
    public com.telusko.quizapp.schema.VehicleDetails.Builder clearManufacturingYear() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VehicleDetails build() {
      try {
        VehicleDetails record = new VehicleDetails();
        record.empId = fieldSetFlags()[0] ? this.empId : (java.lang.Integer) defaultValue(fields()[0]);
        record.vehicleNo = fieldSetFlags()[1] ? this.vehicleNo : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.vehicleName = fieldSetFlags()[2] ? this.vehicleName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.insurance = fieldSetFlags()[3] ? this.insurance : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.manufacturingYear = fieldSetFlags()[4] ? this.manufacturingYear : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VehicleDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<VehicleDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VehicleDetails>
    READER$ = (org.apache.avro.io.DatumReader<VehicleDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
